const { match } = require("assert");
const { request } = require("https");
const { read } = require("node:fs/promises");

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
     

    //Required for collection group queries
    match /posts/{postId}{
        allow read;
    }

    //Must have valid user.
    match /users/{userId}{
        allow read;
        allow create: if isValidUser(userId)
    }

    match /usernames/{username}{
        allow read;
        allow create: if isValidUsername(username)
    }

    match /users/{userId}/posts/{postId}{
        allow read;
        allow create: if canCreatePost(userId);
        allow update: if canCreatePost(userId) || canIncrementHearts(userId,postId);
        allow delete: if request.auth.uid==userId;
    }


    match /users/{userId}/posts/{postId}/hearts/{heartId}{
        allow read;
        allow write: if  request.auth.uid=heartId;
        
    }


    function isValidUser(userId){
        let isOwner = request.auth.uid == userId;
        let username = request.resource.data.username;
        let createdValidUsername = existsAfter(/databases/$(database)/documents/usernames/$(username));
        return isOwner && createdValidUsername;
    }

    function isValidUsername(userId){
        let isOwner = request.auth.uid == request.resource.data.uid;
        let isValidLength =username.size( )>= 3 && username.size()<=15;
        // Allows us to retrieve document after the batch has hypothetical been finished
        let isValidUserDoc = getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data.username ==;
        
        return isOwner && isValidLength && isValidUserDoc;
    }


    
    }
  }
}